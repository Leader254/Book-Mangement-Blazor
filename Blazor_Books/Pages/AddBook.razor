<EditForm Model="@book" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="@book.Title" />
        <ValidationMessage For="@(() => book.Title)" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="@book.Description" />
        <ValidationMessage For="@(() => book.Description)" />
    </div>

    @{
        var i = 0;
    }
    <div class="form-group mt-1">
        <label for="author(s)">Author(s)</label>
        @foreach(var author in book.Author)
        {
            i++;
            author.Id = i;
            <div class="input-group mb-2">
                <InputText id="authors" class="form-control" @bind-Value="@author.Name" />
            </div>
            
        }
        <ValidationMessage For="@(() => book.Author)" />
        
    </div>

    @if (IsEdit)
    {
        <button type="submit" class="btn btn-primary" @onclick="HandleBookUpdate">Update</button>
    }
    else
    {
        <button type="button" onclick="@(()=>book.Author.Add(new Author()))" class=" mt-2 btn btn-primary">Add Author </button>
        <button type="submit" class="btn btn-primary mt-2">Add Book</button>
    }
</EditForm>



@code {
    private Books book = new Books()
        {
            Id = new Random().Next(1, 1000)
        };
    private List<int> selectedAuthors = new List<int>();
    private string authorInput = string.Empty;

    public bool IsEdit { get; set; } = false;

    [Parameter]
    public EventCallback<Books> OnValidSubmit { get; set; }

    [Parameter]
    public EventCallback<Books> OnBookUpdate { get; set; }

    [Parameter]
    public Books UpdateBook
    {
        get => book;
        set
        {
            book = value ?? book;
            IsEdit = value != null;
        }
    }

    private async Task HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync(book);

        // reset the book
        book = new Books()
        {
            Id = new Random().Next(1, 1000)
        };
    }

    private async Task HandleBookUpdate()
        {
            await OnBookUpdate.InvokeAsync(book);

            // reset the book
            book = new Books()
            {
                Id = new Random().Next(1, 1000)
            };
        }
}
